# Generated by Django 4.1.6 on 2023-09-11 19:52

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('user_id', models.BigIntegerField(null=True, unique=True, verbose_name='ID Пользователя Телеграм')),
                ('access', models.CharField(choices=[('user', 'Пользователь'), ('agreement', 'Согласующий')], max_length=100, null=True, verbose_name='Доступ')),
                ('role', models.CharField(choices=[('analyst', 'Аналитик'), ('expert', 'Эксперт'), ('ns', 'Начальник сектора')], max_length=100, null=True, verbose_name='Роль в секторе')),
                ('photo', models.ImageField(blank=True, null=True, upload_to='photo/')),
                ('sop', models.CharField(choices=[('stvp', 'Ставрополь'), ('omsk', 'Омск'), ('vlg', 'Волгоград'), ('smr', 'Самара')], max_length=100, null=True, verbose_name='СОП')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Пользователь',
                'verbose_name_plural': 'Пользователи',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Quarter',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quarter', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(4)], verbose_name='Квартал')),
                ('year', models.IntegerField(validators=[django.core.validators.MinValueValidator(1)], verbose_name='Год')),
            ],
            options={
                'verbose_name': 'Квартал',
                'verbose_name_plural': 'Кварталы',
            },
        ),
        migrations.CreateModel(
            name='Mistake',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('activity', models.CharField(max_length=200, null=True, verbose_name='Активность')),
                ('comment', models.CharField(max_length=200, null=True, verbose_name='Комментарий')),
                ('criterion', models.CharField(max_length=200, null=True, verbose_name='Критерий')),
                ('employee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='mistake_employee', to=settings.AUTH_USER_MODEL, verbose_name='Сотрудник')),
                ('initiator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='mistake_initiator', to=settings.AUTH_USER_MODEL, verbose_name='Инициатор')),
                ('quarter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='mistake_quarter', to='db_api.quarter', verbose_name='Квартал')),
            ],
            options={
                'verbose_name': 'Ошибка',
                'verbose_name_plural': 'Ошибки',
            },
        ),
        migrations.CreateModel(
            name='Like',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('employee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='like_employee', to=settings.AUTH_USER_MODEL, verbose_name='Сотрудник')),
                ('initiator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='like_initiator', to=settings.AUTH_USER_MODEL, verbose_name='Инициатор')),
                ('quarter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='like_quarter', to='db_api.quarter', verbose_name='Квартал')),
            ],
            options={
                'verbose_name': 'Лайк',
                'verbose_name_plural': 'Лайки',
            },
        ),
        migrations.CreateModel(
            name='Bonus',
            fields=[
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('activity', models.CharField(max_length=200, null=True, verbose_name='Активность')),
                ('comment', models.CharField(max_length=200, null=True, verbose_name='Комментарий')),
                ('criterion', models.CharField(max_length=200, null=True, verbose_name='Критерий')),
                ('employee', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bonus_employee', to=settings.AUTH_USER_MODEL, verbose_name='Сотрудник')),
                ('initiator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bonus_initiator', to=settings.AUTH_USER_MODEL, verbose_name='Инициатор')),
                ('quarter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bonus_quarter', to='db_api.quarter', verbose_name='Квартал')),
            ],
            options={
                'verbose_name': 'Бонус',
                'verbose_name_plural': 'Бонусы',
            },
        ),
    ]
